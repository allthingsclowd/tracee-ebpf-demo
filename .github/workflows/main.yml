name: Tracee-eBPF Dup Detection

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Download Tracee-eBPF Release
      run: |
        wget https://github.com/aquasecurity/tracee/releases/download/v0.19.0/tracee-x86_64.v0.19.0.tar.gz
        tar -xzvf tracee-x86_64.v0.19.0.tar.gz
        echo "finished extraction"
        pwd
        ls -al

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libelf-dev libpcap-dev

    - name: Run Tracee in background
      run: |
        sudo ./dist/tracee-ebpf -e dup* -o format:gob -o out-file:/tmp/tracee.gob &
        echo "Tracee PID: $!"
      id: tracee


    - name: Run eBPF Program
      run: |
        sudo apt-get install -y python3
        python3 -c "from bcc import BPF; bpf_source = '''int hello_world(void *ctx) { bpf_trace_printk(\"--\\n\"); return 0; }'''; b = BPF(text=bpf_source); b.attach_kprobe(event=b.get_syscall_fnname('clone'), fn_name='hello_world'); count = 0; def print_event(cpu, data, size): global count; count += 1; print('--'); if count == 4: b.detach_kprobe(event=b.get_syscall_fnname('clone')); print('Success' if count == 4 else 'Fail'); b['events'].open_perf_buffer(print_event); while count < 4: b.perf_buffer_poll()"


    - name: Check Tracee output for dup syscall
      run: |
        # Wait a bit for Tracee to catch up
        ls -al /tmp/tr*
        sleep 5
        cat /tmp/tracee.gob
        # This is a conceptual command; actual implementation may vary
        if grep -q "dup" /tmp/tracee.gob; then
          echo "dup syscall detected successfully."
          exit 0
        else
          echo "dup syscall not detected."
          exit 1
        fi

